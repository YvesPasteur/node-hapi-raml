{"version":3,"sources":["../src/index.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;;;;;;;;;;;;;;kBAEE,IAAI;;;;yBACF,cAAc;;;;0BACR,aAAa;;;;sBACtB,QAAQ;;;;IAED,QAAQ;AACd,aADM,QAAQ,CACb,MAAM,EAAE,cAAc,EAAE,QAAQ,EAAE;8BAD7B,QAAQ;;AAErB,YAAI,MAAM,KAAK,SAAS,IACrB,OAAO,MAAM,KAAK,UAAU,EAAE;AAC7B,kBAAM,IAAI,KAAK,CAAC,8BAA8B,CAAC,CAAC;SACnD,MAAM;AACH,gBAAI,CAAC,MAAM,GAAG,MAAM,CAAC;SACxB;AACD,YAAI,cAAc,KAAK,SAAS,IAC7B,OAAO,cAAc,KAAK,QAAQ,EAAE;AACnC,kBAAM,IAAI,KAAK,CAAC,sCAAsC,CAAC,CAAC;SAC3D,MAAM;AACH,gBAAI,CAAC,cAAc,GAAG,cAAc,CAAC;SACxC;;AAED,YAAI,CAAC,IAAI,GAAG,qEAAyB,QAAQ,CAAC,CAAC;KAClD;;iBAhBgB,QAAQ;;eAkBnB,kBAAG;;;AACL,mBAAO,aAAY,UAAC,OAAO,EAAE,MAAM,EAAK;AACpC,oBAAI,cAAc,GAAG,MAAK,cAAc;oBACpC,MAAM,GAAG,MAAK,MAAM,CAAC;;AAEzB,sBAAK,IAAI,CAAC,WAAW,EAAE,CACtB,IAAI,CAAC,UAAU,QAAQ,EAAE;AACtB,wBAAI,QAAQ,GAAG,KAAK,CAAC;;AAErB,wCAAE,IAAI,CAAC,QAAQ,EAAE,UAAC,KAAK,EAAK;AACxB,4BAAI,cAAc,CAAC,KAAK,CAAC,SAAS,CAAC,KAAK,SAAS,EAAE;;AAC/C,oCAAI,UAAU,GAAG,cAAc,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;;AAEjD,oCAAI,UAAU,CAAC,KAAK,CAAC,aAAa,CAAC,KAAK,SAAS,IAC9C,OAAO,UAAU,CAAC,KAAK,CAAC,aAAa,CAAC,KAAK,UAAU,EAAE;;AACtD,4CAAI,kBAAkB,GAAG,UAAU,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC;;AAEzD,8CAAM,CAAC,KAAK,CAAC;AACT,kDAAM,EAAE,KAAK,CAAC,MAAM;AACpB,gDAAI,EAAE,KAAK,CAAC,GAAG;AACf,mDAAO,EAAE,iBAAC,OAAO,EAAE,KAAK,EAAK;AACzB,kEAAkB,CAAC,KAAK,CAAC,UAAU,EAAE,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC,CAAC;6CAC1D;yCACJ,CAAC,CAAC;;iCACN,MAAM;AACH,4CAAQ,GAAG,IAAI,CAAC;AAChB,0CAAM,sBAAmB,KAAK,CAAC,aAAa,2BAAoB,KAAK,CAAC,SAAS,8BAA0B,CAAC;AAC1G;2CAAO,KAAK;sCAAC;iCAChB;;;;yBACJ,MAAM;AACH,oCAAQ,GAAG,IAAI,CAAC;AAChB,kCAAM,iCAA8B,KAAK,CAAC,SAAS,8BAA0B,CAAC;AAC9E,mCAAO,KAAK,CAAC;yBAChB;qBACJ,CAAC,CAAC;;AAEH,wBAAI,CAAC,QAAQ,EAAE;AACX,+BAAO,EAAE,CAAC;qBACb;iBACJ,CAAC,SACI,CAAC,UAAC,GAAG,EAAK;AACZ,0BAAM,CAAC,GAAG,CAAC,CAAC;iBACf,CAAC,CAAC;aACN,CAAC,CAAC;SACN;;;WA9DgB,QAAQ;;;qBAAR,QAAQ","file":"index.js","sourcesContent":["'use strict';\n\nimport fs from 'fs';\nimport RAML from './utils/RAML';\nimport ramlParser from 'raml-parser';\nimport _ from 'lodash';\n\nexport default class HapiRaml {\n    constructor(server, controllersMap, ramlPath) {\n        if (server === undefined\n        || typeof server !== 'function') {\n            throw new Error('Missing `server` dependency.');\n        } else {\n            this.server = server;\n        }\n        if (controllersMap === undefined\n        || typeof controllersMap !== 'object') {\n            throw new Error('Missing `controllersMap` dependency.');\n        } else {\n            this.controllersMap = controllersMap;\n        }\n\n        this.raml = new RAML(fs, ramlParser, ramlPath);\n    }\n\n    hookup() {\n        return new Promise((resolve, reject) => {\n            let controllersMap = this.controllersMap,\n                server = this.server;\n\n            this.raml.getRouteMap()\n            .then(function (routeMap) {\n                let rejected = false;\n\n                _.each(routeMap, (route) => {\n                    if (controllersMap[route.className] !== undefined) {\n                        let controller = controllersMap[route.className];\n\n                        if (controller[route.classFunction] !== undefined\n                        && typeof controller[route.classFunction] === 'function') {\n                            let controllerFunction = controller[route.classFunction];\n\n                            server.route({\n                                method: route.method,\n                                path: route.uri,\n                                handler: (request, reply) => {\n                                    controllerFunction.apply(controller, [request, reply]);\n                                }\n                            });\n                        } else {\n                            rejected = true;\n                            reject(`Tried to find '${route.classFunction}' on Controller '${route.className}' but it did not exist.`);\n                            return false;\n                        }\n                    } else {\n                        rejected = true;\n                        reject(`Tried to find Controller '${route.className}' but it did not exist.`);\n                        return false;\n                    }\n                });\n\n                if (!rejected) {\n                    resolve();\n                }\n            })\n            .catch((err) => {\n                reject(err);\n            });\n        });\n    }\n}\n"]}