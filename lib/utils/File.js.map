{"version":3,"sources":["../../src/utils/File.js"],"names":[],"mappings":"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","file":"File.js","sourcesContent":["'use strict';\n\nimport path from 'path';\nimport _ from 'lodash';\n\nexport default class File {\n    constructor(fs, modelsPath, collectionsPath) {\n        this.resolvedModelsPath = undefined;\n        this.resolvedCollectionsPath = undefined;\n\n        if (fs === undefined) {\n            throw new Error('Missing `fs` dependency.');\n        } else {\n            this._fs = fs;\n        }\n\n        if (modelsPath === undefined) {\n            throw new Error('Missing path to Models');\n        } else {\n            this.resolvedModelsPath = path.resolve(process.cwd(), modelsPath);\n\n            if (!fs.existsSync(this.resolvedModelsPath)) {\n                throw new Error('path to Models does not exist');\n            }\n        }\n\n        if (collectionsPath === undefined) {\n            throw new Error('Missing path to Collections');\n        } else {\n            this.resolvedCollectionsPath = path.resolve(process.cwd(), collectionsPath);\n\n            if (!fs.existsSync(this.resolvedCollectionsPath)) {\n                throw new Error('path to Collections does not exist');\n            }\n        }\n    }\n\n    fetchModelFiles() {\n        return new Promise((resolve, reject) => {\n            this._fs.readdir(this.resolvedModelsPath, (err, files) => {\n                if (err) {\n                    reject(err);\n                } else {\n                    resolve(files);\n                }\n            });\n        });\n    }\n\n    loadModelFiles(modelFiles) {\n        return new Promise((resolve, reject) => {\n            let rejected = false,\n                modelMap = {};\n            _.each(modelFiles, (modelFile) => {\n                let modelPath = `${this.resolvedModelsPath}/${modelFile}`;\n                try {\n                    let loadedModel = require(modelPath);\n                    if (loadedModel.name === undefined) {\n                        reject(`Unable to load model from file ${modelPath}, is it a valid node.js module?`);\n                        rejected = true;\n                        return false;\n                    } else {\n                        modelMap[loadedModel.name] = loadedModel;\n                    }\n                } catch (e) {\n                    console.log(e);\n                }\n            });\n\n            if (!rejected) {\n                resolve(modelMap);\n            }\n        });\n    }\n\n    fetchCollectionFiles() {\n        return new Promise((resolve, reject) => {\n            this._fs.readdir(this.resolvedCollectionsPath, (err, files) => {\n                if (err) {\n                    reject(err);\n                } else {\n                    resolve(files);\n                }\n            });\n        });\n    }\n};\n"]}